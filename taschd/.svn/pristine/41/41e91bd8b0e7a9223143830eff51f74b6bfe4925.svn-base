package edu.udel.cis.taschd.gen;

import java.util.Arrays;


/**
 * <p>
 *  Solve an n-by-n assignment problem. Bare-bones implementation:
 * </p>
 * 
 * <p>
 * {@link Section}s are belong to a {@link Course}.
 * </p>
 * 
 * @author https://www.sanfoundry.com/java-program-implement-hungarian-algorithm-bipartite-matching/
 */


public class Hungarian

{

    private final double[][] costMatrix;

    private final int        rows, cols, dim;

    private final double[]   labelByWorker, labelByJob;

    private final int[]      minSlackWorkerByJob;

    private final double[]   minSlackValueByJob;

    private final int[]      matchJobByWorker, matchWorkerByJob;

    private final int[]      parentWorkerByCommittedJob;

    private final boolean[]  committedWorkers;

 

    public Hungarian(double[][] costMatrix)

    {

        this.dim = Math.max(costMatrix.length, costMatrix[0].length);

        this.rows = costMatrix.length;

        this.cols = costMatrix[0].length;

        this.costMatrix = new double[this.dim][this.dim];

        for (int w = 0; w < this.dim; w++)

        {

            if (w < costMatrix.length)

            {

                if (costMatrix[w].length != this.cols)

                {

                    throw new IllegalArgumentException("Irregular cost matrix");

                }

                this.costMatrix[w] = Arrays.copyOf(costMatrix[w], this.dim);

            }

            else

            {

                this.costMatrix[w] = new double[this.dim];

            }

        }

        labelByWorker = new double[this.dim];

        labelByJob = new double[this.dim];

        minSlackWorkerByJob = new int[this.dim];

        minSlackValueByJob = new double[this.dim];

        committedWorkers = new boolean[this.dim];

        parentWorkerByCommittedJob = new int[this.dim];

        matchJobByWorker = new int[this.dim];

        Arrays.fill(matchJobByWorker, -1);

        matchWorkerByJob = new int[this.dim];

        Arrays.fill(matchWorkerByJob, -1);

    }

 

    protected void computeInitialFeasibleSolution()

    {

        for (int j = 0; j < dim; j++)

        {

            labelByJob[j] = Double.POSITIVE_INFINITY;

        }

        for (int w = 0; w < dim; w++)

        {

            for (int j = 0; j < dim; j++)

            {

                if (costMatrix[w][j] < labelByJob[j])

                {

                    labelByJob[j] = costMatrix[w][j];

                }

            }

        }

    }

 

    public int[] execute()

    {

        /*

         * Heuristics to improve performance: Reduce rows and columns by their

         * smallest element, compute an initial non-zero dual feasible solution

         * and

         * create a greedy matching from workers to jobs of the cost matrix.

         */

        reduce();

        computeInitialFeasibleSolution();

        greedyMatch();

        int w = fetchUnmatchedWorker();

        while (w < dim)

        {

            initializePhase(w);

            executePhase();

            w = fetchUnmatchedWorker();

        }

        int[] result = Arrays.copyOf(matchJobByWorker, rows);

        for (w = 0; w < result.length; w++)

        {

            if (result[w] >= cols)

            {

                result[w] = -1;

            }

        }

        return result;

    }

 

    protected void executePhase()

    {

        while (true)

        {

            int minSlackWorker = -1, minSlackJob = -1;

            double minSlackValue = Double.POSITIVE_INFINITY;

            for (int j = 0; j < dim; j++)

            {

                if (parentWorkerByCommittedJob[j] == -1)

                {

                    if (minSlackValueByJob[j] < minSlackValue)

                    {

                        minSlackValue = minSlackValueByJob[j];

                        minSlackWorker = minSlackWorkerByJob[j];

                        minSlackJob = j;

                    }

                }

            }

            if (minSlackValue > 0)

            {

                updateLabeling(minSlackValue);

            }

            parentWorkerByCommittedJob[minSlackJob] = minSlackWorker;

            if (matchWorkerByJob[minSlackJob] == -1)

            {

                /*

                 * An augmenting path has been found.

                 */

                int committedJob = minSlackJob;

                int parentWorker = parentWorkerByCommittedJob[committedJob];

                while (true)

                {

                    int temp = matchJobByWorker[parentWorker];

                    match(parentWorker, committedJob);

                    committedJob = temp;

                    if (committedJob == -1)

                    {

                        break;

                    }

                    parentWorker = parentWorkerByCommittedJob[committedJob];

                }

                return;

            }

            else

            {

                /*

                 * Update slack values since we increased the size of the

                 * committed

                 * workers set.

                 */

                int worker = matchWorkerByJob[minSlackJob];

                committedWorkers[worker] = true;

                for (int j = 0; j < dim; j++)

                {

                    if (parentWorkerByCommittedJob[j] == -1)

                    {

                        double slack = costMatrix[worker][j]

                                - labelByWorker[worker] - labelByJob[j];

                        if (minSlackValueByJob[j] > slack)

                        {

                            minSlackValueByJob[j] = slack;

                            minSlackWorkerByJob[j] = worker;

                        }

                    }

                }

            }

        }

    }

 

    protected int fetchUnmatchedWorker()

    {

        int w;

        for (w = 0; w < dim; w++)

        {

            if (matchJobByWorker[w] == -1)

            {

                break;

            }

        }

        return w;

    }

 

    protected void greedyMatch()

    {

        for (int w = 0; w < dim; w++)

        {

            for (int j = 0; j < dim; j++)

            {

                if (matchJobByWorker[w] == -1

                        && matchWorkerByJob[j] == -1

                        && costMatrix[w][j] - labelByWorker[w] - labelByJob[j] == 0)

                {

                    match(w, j);

                }

            }

        }

    }

 

    protected void initializePhase(int w)

    {

        Arrays.fill(committedWorkers, false);

        Arrays.fill(parentWorkerByCommittedJob, -1);

        committedWorkers[w] = true;

        for (int j = 0; j < dim; j++)

        {

            minSlackValueByJob[j] = costMatrix[w][j] - labelByWorker[w]

                    - labelByJob[j];

            minSlackWorkerByJob[j] = w;

        }

    }

 

    protected void match(int w, int j)

    {

        matchJobByWorker[w] = j;

        matchWorkerByJob[j] = w;

    }

 

    protected void reduce()

    {

        for (int w = 0; w < dim; w++)

        {

            double min = Double.POSITIVE_INFINITY;

            for (int j = 0; j < dim; j++)

            {

                if (costMatrix[w][j] < min)

                {

                    min = costMatrix[w][j];

                }

            }

            for (int j = 0; j < dim; j++)

            {

                costMatrix[w][j] -= min;

            }

        }

        double[] min = new double[dim];

        for (int j = 0; j < dim; j++)

        {

            min[j] = Double.POSITIVE_INFINITY;

        }

        for (int w = 0; w < dim; w++)

        {

            for (int j = 0; j < dim; j++)

            {

                if (costMatrix[w][j] < min[j])

                {

                    min[j] = costMatrix[w][j];

                }

            }

        }

        for (int w = 0; w < dim; w++)

        {

            for (int j = 0; j < dim; j++)

            {

                costMatrix[w][j] -= min[j];

            }

        }

    }

 

    protected void updateLabeling(double slack)

    {

        for (int w = 0; w < dim; w++)

        {

            if (committedWorkers[w])

            {

                labelByWorker[w] += slack;

            }

        }

        for (int j = 0; j < dim; j++)

        {

            if (parentWorkerByCommittedJob[j] != -1)

            {

                labelByJob[j] -= slack;

            }

            else

            {

                minSlackValueByJob[j] -= slack;

            }

        }

    }

 

    public static void main(String[] args)

    {
		
    	double[][] values = {
				 {0.2,0,1,1},
				 {1,0.9,0.6,0.8},
				 {1,0.6,1,10},
				 {0,0.2,0.1,1},
			
				 };
    	double[][] values2 = {
				 {0.2,0,1,1, 12, 13, 14},
				 {1,0.9,0.6,0.8, 13, 14, 15},
				 {1,0.6,1,10 , 15, 16, 13},
				 {0,0.2,0.1,1, 23, 13, 43},
				 {0,0,0,0, 0, 0, 0},
				 {0,0,0,0, 0, 0, 0},
				 {0,0,0,0, 0, 0, 0},
			
				 };
    	
		double[][] values3 = {
				 {0.2,0,1,1},
				 {1,0.9,0.6,0.8},
				 {1,0.6,1,10},
				 {0,0.2,0.1,1},
			
				 };
		 double[][] values4 = {
		 {0.2, 0, 1, 1, 14, 12, 15},
		 {1, 0.9, 0.6, 0.8, 14, 15, 17},
		 {1, 0.6, 1, 10, 12, 20, 16},
		 {0, 0.2, 0.1, 1, 22, 13, 15},
		 {0, 0, 0, 0, 0, 0, 0},
		 {0,0,0,0,0,0, 0},
		 {0,0,0,0,0,0,0}
		 };
		 
		 double[][] values5 = { 
			{ 68, 38, 9, 60, 46, 58, 83, 87, 84, 20 },
			{ 53, 4, 16, 4, 44, 72, 34, 97, 69, 5 },
			{ 21, 2, 45, 55, 34, 15, 2, 13, 12, 51 },
			{ 8, 93, 22, 66, 25, 9, 59, 71, 12, 95 },
			{ 42, 35, 33, 23, 3, 8, 8, 50, 23, 95 },
			{ 74, 37, 15, 21, 36, 49, 80, 55, 79, 53 },
			{ 21, 97, 55, 12, 25, 67, 10, 65, 2, 49 },
			{ 8, 48, 1, 92, 8, 76, 41, 32, 87, 36 },
			{ 32, 73, 71, 47, 94, 92, 16, 97, 5, 4 },
			{ 58, 37, 54, 52, 84, 16, 34, 5, 72, 26 } };
		 
//        Scanner sc = new Scanner(System.in);
//
//        System.out.println("Enter the dimentsions of the cost matrix: ");
//
//        System.out.println("r:");
//
//        int r = sc.nextInt();
//
//        System.out.println("c:");
//
//        int c = sc.nextInt();
//
//        System.out.println("Enter the cost matrix: <row wise>");
//
//        double[][] cost = new double[r][c];
//
//        for (int i = 0; i < r; i++)
//
//        {
//
//            for (int j = 0; j < c; j++)
//
//            {
//
//                cost[i][j] = sc.nextDouble();
//
//            }
//
//        }

        Hungarian hbm = new Hungarian(values3);

        int[] result = hbm.execute();

        System.out.println("Bipartite Matching: " + Arrays.toString(result));

//        sc.close();

    }

}