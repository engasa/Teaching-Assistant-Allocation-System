package edu.udel.cis.taschd.userinterface;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import edu.udel.cis.taschd.ca.CourseAssistant;
import edu.udel.cis.taschd.course.CourseInstance;
import edu.udel.cis.taschd.db.Database;
import edu.udel.cis.taschd.extract.CAScheduleExtractor;
import edu.udel.cis.taschd.extract.CourseScheduleExtractor;
import edu.udel.cis.taschd.skill.SkillSet;
import edu.udel.cis.taschd.time.WeeklySchedule;

/**
 * taschd CISC 675 - Software Engineering Principles
 * 
 * @author Ankush Saini
 * 
 *         The Ui class is the way a user interacts with taschd. It displays and
 *         store details of the CA like the CA ID, term, CA's schedule, set of
 *         skills that the CA possesses. Course details like the Course ID,
 *         Course schedule, set of skills the course requires and also
 *         assignments of CAs to courses. Along with this, the user can add
 *         details to the db like term, new skill to the CA,new skill to the
 *         course. To access the Ui, the user requires a user name and password.
 */

public class UserInterface {
	/**
	 * get Current directory of user
	 */
	static String directory = System.getProperty("user.dir");
	private static boolean success = false;

	// User authentication method
	public void validateLogin(String[] userName, String[] password) {

	}

	/**
	 * Initializes the default directory structure
	 * <p>
	 * command - taschd init redirects here
	 * </p>
	 * <p>
	 * Output - Create directory structure - taschd_dir with subfolders courses,
	 * ca_pool, terms
	 * </p>
	 * 
	 * @author sumeetgupta
	 */

	public void init() {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		try {
			// folder name courses in taschd_dir
			createDirectory(new File(taschdDirectory, "courses"));
			// folder name ca_pool in taschd_dir
			createDirectory(new File(taschdDirectory, "ca_pool"));
			// folder name terms in taschd_dir
			createDirectory(new File(taschdDirectory, "terms"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}
	}

	/**
	 * Method to check if a directory exists. If file does not exist, create it.
	 * <p>
	 * Used by init()
	 * </p>
	 * 
	 * @author sumeetgupta
	 * @param file
	 *            to create
	 * @return file
	 * @throws IOException
	 */
	public static File createDirectory(File file) throws IOException {
		// check if directory exists
		if (file.exists()) {
			return file;
		}
		// create directory if it doesn't already exist
		if (file.mkdirs()) {
			return file;
		}
		throw new IOException("Failed to create directory '" + file.getAbsolutePath() + "' for an unknown reason.");
	}

	/**
	 * Adds a new term to the directory
	 * 
	 * @author anksaini command - taschd addTerm redirects here
	 */

	public void addTerm(String term) {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		File terms = new File(taschdDirectory, "terms");
		File termDir = new File(terms, term);
		try {

			// file name courses in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "courses"));
			// file name assistants in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assistants"));
			// file name assignments in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assignments"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}

	}

	// Method to get the CA's schedule from webreg
	public ArrayList<CourseAssistant> getCaSchd(String source, String[] credentials, int[] CAIDs, String term) {
		CAScheduleExtractor caSchd = new CAScheduleExtractor(source, credentials, CAIDs, term);
		ArrayList<CourseAssistant> caInst = caSchd.returnCASchedules();
		return caInst;
	}

	// Method to get Course's schedule from webreg
	public ArrayList<CourseInstance> getCourseSchd(String source, String courseKey, String term) {
		CourseScheduleExtractor cse = new CourseScheduleExtractor(source, courseKey, term);
		ArrayList<CourseInstance> courseInst = cse.returnCourseInstances();
		return courseInst;
	}

	// Method to store Course in database
	@SuppressWarnings("static-access")
	public static boolean storeCourseToDatabase(CourseInstance c) {
		Database dbo = new Database();
		try {
			success = dbo.storeCourse(c);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return success;
	}

	// Method to store CA
	@SuppressWarnings("static-access")
	public static boolean storeCAToDatabase(CourseAssistant ca) {
		Database dbo = new Database();
		success = dbo.storeCA(ca);
		return success;
	}

	// Method to get CA By Id from database
	public CourseAssistant getCAbyIDFromDatabase(int caID, String termOfCA) {
		Database dbo = new Database();
		CourseAssistant ca = dbo.getCAById(caID, termOfCA);
		return ca;
	}

	// Method to get Course By code from database
	public CourseInstance getCourseByCodeFromDatabase(String code,String term) {
		Database dbo = new Database();
		CourseInstance c = dbo.getCourseByCode(code,term);
		return c;
	}

//	Method to get Course Schedule by Code from database
	public WeeklySchedule getCourseSchdByCodeFromDatabase(String courseCode,String term) {
		Database dbo = new Database();
		WeeklySchedule ws = dbo.getCourseSchdByCode(courseCode,term);
		return ws;
	}

//	Method to get CA schedule by Id from database
	public WeeklySchedule getCASchdByIDFromDatabase(int caID, String term) {
		Database dbo = new Database();
		WeeklySchedule ws = dbo.getCASchdByID(caID, term);
		return ws;
	}

	// Generates assignments
	public void genAssign() {

	}

	// Need to further split this method based on Ca, Assign, Time & Skill
	// modules

	public void display() {
	}

	// Method to add new skill to a course
	public void addCourseSkill(SkillSet skills, int courseID) {

	}

	// Method to add new skill to a CA
	public void addCASkill(SkillSet skills, int caID) {

	}

}
