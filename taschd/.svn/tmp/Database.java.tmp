package edu.udel.cis.taschd.db;

import edu.udel.cis.taschd.ca.*;
import edu.udel.cis.taschd.course.*;
import edu.udel.cis.taschd.course.CourseInstance;
import edu.udel.cis.taschd.time.WeeklySchedule;
import java.io.*;
import java.util.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import edu.udel.cis.taschd.ca.CourseAssistant;
import edu.udel.cis.taschd.ca.CourseAssistantPool;
import edu.udel.cis.taschd.course.Course;
import edu.udel.cis.taschd.course.CourseInstance;
import edu.udel.cis.taschd.course.Section;
import edu.udel.cis.taschd.skill.SkillSet;
import edu.udel.cis.taschd.time.WeeklySchedule;

<<<<<<< .mine
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import org.json.simple.JSONObject;
||||||| .r277
=======
>>>>>>> .r279
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * The Database class is a component of the DB module. It stores and retrieves
 * data by the request of the client.
 * 
 * @author Michael Oyefusi
 * 
 */

public class Database {
	private static boolean success = false;
	/**
	 * get Current directory of user
	 */
	static String directory = System.getProperty("user.dir");
	File rootDir = new File(directory);
	File taschdDirectory = new File(rootDir, "taschd_dir");
	String[] taschdFolders = taschdDirectory.list();
	static String course = "courses";
	static String caPool = "ca_pool";
	static String term = "terms";
	
	@SuppressWarnings("unchecked")
	public static boolean storeCourse(CourseInstance c) throws FileNotFoundException {
		String fileToStore = c.getCourse().getPrefix() + c.getCourse().getCourseCode() + ".json";
		String courseDirectory = directory + "/taschd_dir/courses/" + fileToStore;
		JSONObject value = new JSONObject();

		// putting data into JSONObject value
		value.put("Department ID", c.getCourse().getPrefix());
		value.put("Course Code", c.getCourse().getCourseCode());
		value.put("Course Name", c.getCourse().getCourseName());
		value.put("Skills", c.getCourse().getSkills());
		value.put("Has Lab", c.isHasLab());

		JSONArray sectionData = new JSONArray();

		Iterator<Section> iter = c.getSections().iterator();
		HashMap<Object, Object> m = new HashMap<>();
		while (iter.hasNext()) {
			Section s = iter.next();
			m.put("Section Number", s.getSectionNumber());
			m.put("Section Type", s.getSectionType());
			m.put("Instructor Name", s.getInstructorName());
			m.put("Current Enrollment", s.getCurrentEnrollment());
			m.put("Enrollment Cap", s.getEnrollmentCap());
			m.put("Location", s.getLocation());
			m.put("TA Assigned", s.isTaAssigned());
			m.put("Num of TA", s.getNumOfTA());
			m.put("Num of LA", s.getNumOfLA());
			m.put("MTAC", s.isMtac());
			m.put("CA Requirement", s.isTaAssigned());
			// Check with Sri
			m.put("WTPS schedule", s.getSchedule());

			sectionData.add(m);
			m.clear();

		}

		// putting Sections to JSONObject
		value.put("Sections", sectionData);

		// writing JSON to file:"CISC675.json" in current working directory
		File file = new File(courseDirectory);
		PrintWriter pw = new PrintWriter(file);
		pw.write(value.toJSONString());

		pw.flush();
		pw.close();
		success = true;

		return success;
	}
	
	
	@SuppressWarnings("unchecked")
	public static boolean storeCA(CourseAssistant ca) throws FileNotFoundException {
		String storedCA = ca.getId() + ca.getLastName() + ".json";
		String courseDirectory = directory + "/taschd_dir/ca_pool/" + storedCA;
		JSONObject caobject = new JSONObject();
		
		// storing CA data fields into JSONObject caobject
		caobject.put("CourseAssistant ID", ca.getId());
		caobject.put("Last Name", ca.getLastName());
		caobject.put("First Name", ca.getFirstName());
		caobject.put("Email Address", ca.getEmailAddress());
		caobject.put("Classification", ca.getGraduateStudent());
		caobject.put("Skills", ca.getPossessedSkillset());
		
		//
		File file = new File(courseDirectory);
		PrintWriter print = new PrintWriter(file);
		print.write(caobject.toJSONString());

		print.flush();
		print.close();
		success = true;

		return success;
	}
<<<<<<< .mine

	/**
	 * gets Course details from CISC675.json
	 * 
	 * @param code
	 * @return
	 * @throws ParseException
	 * @throws IOException
	 * @throws FileNotFoundException
	 */
	public static CourseInstance getCourseByCode(String code, String termForCourse)
			throws FileNotFoundException, IOException, ParseException {
		boolean fileExists = false;
		String fileToRead = code + ".json";
		CourseInstance c = null;
		taschdExists = taschdCheck();
		if (taschdExists) {
			termExists = taschdTermFolderCheck();
			if (termExists) {
				termNumberExists = termNumberFolderCheck(termForCourse);
				if (termNumberExists) {
					termNumberCourseExists = termNumberCourseFolderCheck(termForCourse);
					if (termNumberCourseExists) {
						File rootDir = new File(directory);
						File taschdDirectory = new File(rootDir, "taschd_dir");
						File termsDirectory = new File(taschdDirectory, terms);
						File termNumberDirectory = new File(termsDirectory, termForCourse);
						File termNumberCourseDirectory = new File(termNumberDirectory, course);
						String[] termNumberCourseFolder = termNumberCourseDirectory.list();
						if (termNumberCourseFolder != null) {
							for (int i = 0; i < termNumberCourseFolder.length; i++) {
								if (termNumberCourseFolder[i].equalsIgnoreCase(fileToRead)) {
									fileExists = true;
									break;
								}
							}
						} else {
							System.out.println("File does not exist.");
						}
						if (fileExists) {
							JSONParser parser = new JSONParser();
							File readFile = new File(termNumberCourseDirectory, fileToRead);
							Object ob1 = parser.parse(new FileReader(readFile));
							JSONObject jsonObj = (JSONObject) ob1;

							String prefix = (String) jsonObj.get("Department ID");
							String courseCode = (String) jsonObj.get("Course Code");
							String courseName = (String) jsonObj.get("Course Name");
						//	SkillSet skill = (SkillSet) jsonObj.get("Skills");
							boolean hasLab = (boolean) jsonObj.get("Has Lab");
							
							
							c = new CourseInstance(new Course(prefix, courseCode, courseName),
									Integer.parseInt(termForCourse));
							System.out.println(prefix+courseCode+courseName+hasLab+c);
						} else {
							System.out.println("File does not exist.");
						}
					} else {
						System.out.println("Course folder does not exist for " + termForCourse + " folder.");
					}
				} else {
					System.out.println(termForCourse + " folder does not exist.");
				}
			} else {
				System.out.println("terms folder does not exist in taschd_dir");
			}
		} else {
			System.out.println("taschd directory does not exist.");
		}
		taschdExists = false;
		termExists = false;
		termNumberExists = false;
		termNumberCourseExists = false;
		if (!success) {
			System.out.println("File not read.");
		}
		return c;
	}

	public static void main(String[] args) throws FileNotFoundException, IOException, ParseException {
		CourseInstance c1 = getCourseByCode("CISC675", "2188");
	}
||||||| .r277
=======
	
	public CourseAssistant getCAById(CourseAssistant ca, String termOfCA) {
		JSONParser parser = new JSONParser();
>>>>>>> .r279

		File fileToRead = new File(rootDir, "BenjaminFranklin.json");
		try {
			Object ob1 = parser.parse(new FileReader(""));
			JSONObject jsonObj = (JSONObject) ob1;

			String fName = (String) jsonObj.get("firstName");
			String lName = (String) jsonObj.get("lastName");
			int id = Integer.parseInt((String) jsonObj.get("id"));
			String emailAddress = (String) jsonObj.get("email");
			boolean graduateStudent = (boolean) (jsonObj.get("degree").equals("Grad") ? true : false);
			String possessedSkillset = (String) jsonObj.get("Skills");
			WeeklySchedule wtps = new WeeklySchedule();
			/*JSONArray schedule = (JSONArray) jsonObj.get("wtps");
			Iterator<String> it1 = schedule.iterator();
				while (it1.hasNext()) {
					wtps.addInterval(it1.next());
				}
			CourseAssistant ca1 = new CourseAssistant(fName, lName, id,
			emailAddress, graduateStudent, wtps, possessedSkillset);*/
			
			System.out.println(fName);
			System.out.println(lName);
			System.out.println(id);
			System.out.println(emailAddress);
			System.out.println(graduateStudent);
			System.out.println(wtps);
			System.out.println(possessedSkillset);
		} catch (Exception e) {
			System.out.println(e);
		}
		return ca;
	}

<<<<<<< .mine
	
	public CourseAssistantPool getCAPool() {
		CourseAssistant ca = null;
		CourseAssistantPool capl = new CourseAssistantPool();
		taschdExists = taschdCheck();
		if (taschdExists) {
			caPoolExists = taschdCaPoolFolderCheck();
			if (caPoolExists) {
				File rootDir = new File(directory);
				File taschdDirectory = new File(rootDir, "taschd_dir");
				File caPoolDirectory = new File(taschdDirectory, caPool);
				String[] caPoolFolder = caPoolDirectory.list();
				if (caPoolFolder != null) {
					for (int i = 0; i < caPoolFolder.length; i++) {
						capl.addCourseAssistant(ca);
					}
				}
				else{
					System.out.println(caPool+" folder is empty");
				}
			}
			else{
				System.out.println(caPool+" folder does not exist in taschd_dir");
			}
		}
		else{
			System.out.println("taschd directory does not exist.");
		}
		taschdExists = false;
		caPoolExists = false;
		return null;
	}
	
}
||||||| .r277
=======
}>>>>>>> .r279
