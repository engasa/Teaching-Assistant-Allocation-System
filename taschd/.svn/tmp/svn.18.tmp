package edu.udel.cis.taschd.userinterface;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.simple.parser.ParseException;

import edu.udel.cis.taschd.ca.CourseAssistant;
import edu.udel.cis.taschd.ca.CourseAssistantPool;
import edu.udel.cis.taschd.course.CourseInstance;
import edu.udel.cis.taschd.course.CourseInstancePool;
import edu.udel.cis.taschd.course.Section;
import edu.udel.cis.taschd.db.Database;
import edu.udel.cis.taschd.extract.CAScheduleExtractor;
import edu.udel.cis.taschd.extract.CourseScheduleExtractor;
import edu.udel.cis.taschd.gen.GenerateAssignment;
import edu.udel.cis.taschd.time.WeeklySchedule;

/**
 * taschd CISC 675 - Software Engineering Principles
 * 
 * @author Ankush Saini
 * 
 *         The UiHelper class is the way a user interacts with taschd. It
 *         displays and store details of the CA like the CA ID, term, CA's
 *         schedule, set of skills that the CA possesses. Course details like
 *         the Course ID, Course schedule, set of skills the course requires and
 *         also assignments of CAs to courses. Along with this, the user can add
 *         details to the db like term, new skill to the CA,new skill to the
 *         course. To access the Ui, the user requires a user name and password.
 */

public class UserInterface {
	/**
	 * get Current directory of user
	 */
	static String directory = System.getProperty("user.dir");
	private static boolean success = false;

	/**
	 * Initializes the default directory structure
	 * <p>
	 * command - taschd init redirects here
	 * </p>
	 * <p>
	 * Output - Create directory structure - taschd_dir with subfolders courses,
	 * ca_pool, terms
	 * </p>
	 * 
	 * @author sumeetgupta
	 */

	public void init() {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		try {
			// folder name courses in taschd_dir
			createDirectory(new File(taschdDirectory, "courses"));
			// folder name ca_pool in taschd_dir
			createDirectory(new File(taschdDirectory, "ca_pool"));
			// folder name terms in taschd_dir
			createDirectory(new File(taschdDirectory, "terms"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}
	}

	/**
	 * Method to check if a directory exists. If file does not exist, create it.
	 * <p>
	 * Used by init()
	 * </p>
	 * 
	 * @author sumeetgupta
	 * @param file
	 *            to create
	 * @return file
	 * @throws IOException
	 */
	public static File createDirectory(File file) throws IOException {
		// check if directory exists
		if (file.exists()) {
			return file;
		}
		// create directory if it doesn't already exist
		if (file.mkdirs()) {
			return file;
		}
		throw new IOException("Failed to create directory '" + file.getAbsolutePath() + "' for an unknown reason.");
	}

	/**
	 * Adds a new term to the directory
	 * 
	 * @author anksaini command - taschd addTerm redirects here
	 */

	public void addTerm(String term) {
		File rootDir = new File(directory);
		// file name taschd_dir in current directory
		File taschdDirectory = new File(rootDir, "taschd_dir");
		File terms = new File(taschdDirectory, "terms");
		File termDir = new File(terms, term);
		try {

			// file name courses in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "courses"));
			// file name assistants in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assistants"));
			// file name assignments in taschd_dir/terms/{term}
			createDirectory(new File(termDir, "assignments"));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
		}

	}

	// Method to get the CA's schedule from webreg
	public ArrayList<CourseAssistant> getCaSchd(String source, String[] credentials, int[] CAIDs, String term) {
		CAScheduleExtractor caSchd = new CAScheduleExtractor(source, credentials, CAIDs, term);
		ArrayList<CourseAssistant> caInst = caSchd.returnCASchedules();
		return caInst;
	}

	// Method to get Course's schedule from webreg
	public ArrayList<CourseInstance> getCourseSchd(String source, String courseKey, String term) {
		System.out.println("Source = " + source + "CourseKey=" + courseKey + "Term=" + term);
		System.out.flush();
		CourseScheduleExtractor cse = new CourseScheduleExtractor(source, courseKey, term);
		ArrayList<CourseInstance> courseInst = cse.returnCourseInstances();
		return courseInst;
	}
	
	// Method to get Course's schedule from webreg
	public void getCourseFromWebReg(String source, String courseKey, String term) {
		CourseScheduleExtractor cse = new CourseScheduleExtractor(source, courseKey, term);
		ArrayList<CourseInstance> courseInst = cse.returnCourseInstances();
		if(courseInst!=null){
			for(int i = 0; i< courseInst.size();i++){
				storeCourseToDatabase(courseInst.get(i));
			}
		}
		else
			System.out.println("No course found.");
	}

	// Method to store Course in database
	public static boolean storeCourseToDatabase(CourseInstance c) {
		Database dbo = new Database();
		
		try {
			success = dbo.storeCourse(c) && dbo.storeCourseToDynamic(c, String.valueOf(c.getTerm()));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return success;
	}

	// Method to store CA

	//TODO: add CA dynamically too. Only stores static file.

	public static boolean storeCAToDatabase(CourseAssistant ca,String term) throws FileNotFoundException {
		Database dbo = new Database();
		success = dbo.storeCA(ca);
		return success;
	}

	// Method to get CA By Id from database
	public CourseAssistant getCAbyIDFromDatabase(int caID, String termOfCA) {
		Database dbo = new Database();
		CourseAssistant ca = dbo.getCAById(caID, termOfCA);
		return ca;
	}

	// Method to get Course By code from database
	public CourseInstance getCourseByCodeFromDatabase(String code, String term) {
		Database dbo = new Database();
		CourseInstance c = dbo.getCourseByCode(code, term);
		return c;
	}

	// Method to get Course Schedule by Code from database
	public WeeklySchedule getCourseSchdByCodeFromDatabase(String courseCode, String term) {
		Database dbo = new Database();
		WeeklySchedule ws = dbo.getCourseSchdByCode(courseCode, term);
		return ws;
	}

	// Method to get CA schedule by Id from database
	public WeeklySchedule getCASchdByIDFromDatabase(int caID, String term) {
		Database dbo = new Database();
		WeeklySchedule ws = dbo.getCASchdByID(caID, term);
		return ws;
	}

	// Generates assignments & store to database
	public void genAssign(String term, String fileName) throws FileNotFoundException, IOException, ParseException {
		Database dbo = new Database();
		CourseAssistantPool cap = dbo.getCAPool(term);
		CourseInstancePool cip = dbo.getCourseInstancePool(term);
		GenerateAssignment ga = new GenerateAssignment(cap, cip);
		HashMap<Section, Iterable<CourseAssistant>> obj1 = ga.assign();
		boolean success = dbo.storeAssign(obj1, term, fileName);
		if(success) {
			System.out.println("Successful storage of generated assignment.");
		}
	}

	// Need to further split this method based on Ca, Assign, Time & Skill
	// modules

	public void display() {
	}


	@SuppressWarnings("static-access")
	public final static void main(String[] args) throws FileNotFoundException {
		System.out.println("taschd v0: The TA Scheduler.  http://taschd.cis.udel.edu");
		int count = args.length;
		
		UserInterface ui = new UserInterface();
		for (int i = 0; i < count; i++)
			
			switch (args[0]) {
 
			case "init":
				System.out.println("The directory structure has now been created\n");
				ui.init();
				break;

			case "addterm":
				//args[1] = term (Ex. 2188)
				System.out.println("The term " + args[1] + " has been added\n");
				ui.addTerm(args[1]);
				break;
				
			case "addcourse":
				//String source = args[1] (Ex: Web)
				//String courseKey = args[2] (Ex: CISC675)
				//String term = args[3] (Ex: 2188)
				ui.getCourseFromWebReg(args[1], args[2], args[3]);
				break;
				
			case "getcrsschd":
				//args[1] = String source (Ex: web)
				//args[2] = String courseKey (Ex: CISC675)
				//args[3] = String term (Ex: 2188)
				// TODO Get this command line working. It should not save as a file.
				//TODO Just needs to display the schedules
				//TODO Handle it for up to five courseKeys (make term as args[2])
				ui.getCourseSchd(args[1], args[2], args[3]);
				break;

				
			case "getCoursebyCode":
				//TODO does not display
				//String code = args[1]  (Ex:675)
				//String term = args[2]  (Ex: 2188)
				ui.getCourseByCodeFromDatabase(args[1], args[2]);
				break;
				
			case "getCourseSchdbyCode":
				//TODO does not display
				//String courseCode = args[1] (Ex:675)
				//String term = args[2] (Ex: 2188)
				ui.getCourseSchdByCodeFromDatabase(args[1], args[2]);
				break;
				
			case "addCA":
				//TODO Fix NullPointer Exception that arises from Database method storeCAToDynamic()
				//and also from UserInterface method storeCAToDatabase
				//int caID = args[1] (Ex: 123432)
				//String term = args[2] (Ex: 2188)
				int caid = Integer.parseInt(args[1]);
				CourseAssistant ca = new CourseAssistant(caid);
				ui.storeCAToDatabase(ca, args[2]);
				break;
				
			case "getcaschd":
				// TODO Have not tested because no credentials
				//String source = args[1]
				//String [] credentials [Username = args[2], Password = args[3]]
                //int caID = args[4]
				//String term = args[5]
				//String
				int CAid = Integer.parseInt(args[4]);
				int[] id = {CAid};
				String [] cred = {args[2],args[3]};
				ui.getCaSchd(args[1], cred, id, args[5]);
				break;
				
			case "getCAbyID":
				int StudentID = Integer.parseInt(args[1]);
				ui.getCAbyIDFromDatabase(StudentID, args[2]);
				break;
				
			case "getCASchdbyCAID":
				//args[1] = CAid (Ex: 123432)
				//args[2] = term (Ex: 2188)
				int SID = Integer.parseInt(args[1]);
				ui.getCASchdByIDFromDatabase(SID, args[2]);
				break;
				
			case "genlist":
				//arg[1] = term
				//arg[2] = fileName
				break;
				
			case "display -caschd":
				//arg[1] = term
				//arg[2] = caID1, caID2,...
				break;
				
			case "display -crsschd":
				//arg[1] = term
				//arg[2] = courseKey1, courseKey2,...
				break;
			
			case "display -assignfile":
				//arg[1] = term
				//arg[2] = fileName...
				break;
				
			case "display -assign":
				//arg[1] = term
				//arg[2] = caID1
				//arg[3] = fileName

				break;

			}

	}
}
